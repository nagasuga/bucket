#!/usr/bin/python


import argparse
import json
import logging
import os
import shutil
import sys


class ConfigNotFound(Exception): pass


def set_logger(is_verbose=False):
    level = logging.WARNING
    if is_verbose:
        level = logging.DEBUG
    logging.basicConfig(level=level, format='%(levelname)s: %(message)s')


def load_config(target_path):
    if not os.path.exists(target_path):
        raise ConfigNotFound('Config file {} was not found'.format(target_path))

    with open(target_path, 'r') as f_obj:
        content = f_obj.read()

    return json.loads(content)


def write_config(dest_path, config):
    f_obj = open(dest_path, 'w')
    f_obj.write(json.dumps(config, indent=4))
    f_obj.close()


def load_or_create_config(target_path):
    abs_path = os.path.expanduser(target_path)
    default_config_path = os.path.join(
        os.path.dirname(os.path.realpath(__file__)),
        '..',
        'default_config.json')
                
    if not os.path.exists(abs_path):
        config = json.loads(open(default_config_path, 'r').read())
        write_config(abs_path, config=config)
        return config
    return load_config(abs_path)


def main(args):
    config_path = args.settings
    if config_path is not None:
        config = load_config(config_path)
    else:
        config = load_or_create_config(target_path='~/.bucket')

    for file_path in args.file_paths:
        abs_file_path = os.path.expanduser(file_path)
        if not os.path.exists(abs_file_path):
            logging.error('{}: File not found'.format(abs_file_path))
            continue

        _, ext = os.path.splitext(file_path)
        ext = ext[1:]

        dest_dir = config.get('extensions', {}).get(ext)
        if dest_dir is None:
            logging.error('{file_path}: Unknown file extension "{ext}"'
                  .format(file_path=file_path, ext=ext))
            continue

        abs_dest_dir = os.path.expanduser(dest_dir)
        abs_path = os.path.join(abs_dest_dir, file_path)

        if args.p and not os.path.isdir(abs_dest_dir):
            logging.info('Creating directory: {}'.format(abs_dest_dir))
            os.makedirs(abs_dest_dir)

        try:
            shutil.move(file_path, abs_path)
        except IOError as err:
            logging.error('{}: {}'.format(file_path, err))
        else:
            logging.info('{}: moved to {}'.format(file_path, abs_path))


def setup_args():
    parser = argparse.ArgumentParser(
        description='CLI for auto "bucket"ing files by moving to proper '
                    'directory filtered by type of file')
    parser.add_argument('file_paths', metavar='filename', type=str, nargs='+',
                        help='files to be moved to correct buckets')
    parser.add_argument('--settings', action='store',
                        help='settings file for the bucketing of files in '
                             'JSON format')
    parser.add_argument('-p', action='store_true',
                        help='Create intermediate directories as required. '
                             'If this option is not specified, the full path '
                             'prefix of each operand must already exist')
    parser.add_argument('-v', dest='is_verbose', action='store_true',
                        help='Verbose mode to print more information')
    return parser.parse_args()


if __name__ == '__main__':
    args = setup_args()
    set_logger(is_verbose=args.is_verbose)
    main(args=args)
