#!/usr/bin/python


import argparse
import json
import logging
import os
import shutil
import sys


DEFAULT_CONFIG = {
    'txt': '~/bucket/txt',
    'mp4': '~/bucket/movies',
    'mov': '~/bucket/movies',
}


class ConfigNotFound(Exception): pass


def set_logger():
    handler = logging.StreamHandler()
    handler.setLevel(logging.WARNING)


def load_config(file_path):
    if not os.path.exists(file_path):
        raise ConfigNotFound('Config file {} was not found'.format(file_path))

    with open(file_path, 'r') as f_obj:
        content = f_obj.read()

    return json.loads(content)


def main(file_paths, config, to_create_path=False):
    errors = []
    for file_path in file_paths:
        abs_file_path = os.path.expanduser(file_path)
        if not os.path.exists(abs_file_path):
            print('File not found: {}'.format(abs_file_path))
            continue

        _, ext = os.path.splitext(file_path)
        ext = ext[1:]

        dest_dir = config.get(ext)
        if dest_dir is None:
            print('Unknown file extension "{ext}": '
                  '{file_path}'.format(file_path=file_path, ext=ext))
            continue

        abs_dest_dir = os.path.expanduser(dest_dir)
        abs_path = os.path.join(abs_dest_dir, file_path)

        if to_create_path and not os.path.isdir(dest_dir):
            os.makedirs(dest_dir)

        try:
            shutil.move(file_path, abs_path)
        except IOError as err:
            print('Unable to move {}: {}'.format(file_path, err))
            errors.append((file_path, err))


def setup_args():
    parser = argparse.ArgumentParser(
        description='CLI for auto "bucket"ing files by moving to proper '
                    'directory filtered by type of file.')
    parser.add_argument('file_paths', metavar='N', type=str, nargs='+',
                        help='files to be moved to correct buckets')
    parser.add_argument('--settings', action='store',
                        help='settings file for the bucketing of files in '
                             'JSON format.')
    parser.add_argument('-p', action='store_true',
                        help='Create intermediate directories as required. '
                             'If this option is not specified, the full path '
                             'prefix of each operand must already exist.')
    return parser.parse_args()


if __name__ == '__main__':
    set_logger()
    args = setup_args()

    config_path = args.settings
    if config_path is not None:
        config = load_config(config_path)
    else:
        config_path = os.path.expanduser('~/.bucket')
        if not os.path.exists(config_path):
            config = DEFAULT_CONFIG
            with open(config_path, 'w') as f_obj:
                f_obj.write(json.dumps(config, indent=4))
        else:
            config = load_config(config_path)

    file_paths = set(sys.argv[1:])
    main(file_paths, config=config, to_create_path=args.p)
